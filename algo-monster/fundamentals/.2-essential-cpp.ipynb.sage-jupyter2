{"backend_state":"ready","kernel":"xeus-cling-cpp11","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1728457206254,"metadata":{"language_info":{"codemirror_mode":"text/x-c++src","file_extension":".cpp","mimetype":"text/x-c++src","name":"c++","version":"11"},"latex_envs":{"LaTeX_envs_menu_present":true,"autoclose":false,"autocomplete":true,"bibliofile":"biblio.bib","cite_by":"apalike","current_citInitial":1,"eqLabelWithNumbers":true,"eqNumInitial":1,"hotkeys":{"equation":"Ctrl-E","itemize":"Ctrl-I"},"labels_anchors":false,"latex_user_defs":false,"report_style_numbering":false,"user_envs_cfg":false}},"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"cdfc0c","input":"#include <stdio.h>","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"4fd8b2","input":"// initialize a variable\nint a = 10;\n\n// address or pointer variable\nint *p; // declare of pointer variable\np = &a; // initialize of pointer variable\n\nprintf(\"%d\\n\", a); // 10\nprintf(\"%p\\n\", p); // a's memory location\nprintf(\"%d\\n\", *p); // 10 (*p is also called dereferencing)\nprintf(\"%p\", &a); // memory location of a","output":{"0":{"name":"stdout","output_type":"stream","text":"10\n0x7f51c47d8130\n10\n0x7f51c47d8130"},"1":{"data":{"text/plain":"14"},"exec_count":10,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"9f6fe1","input":"#include <stdlib.h>\n\nint *p, *pp;\n// C\np = (int *)malloc(5 * sizeof(int));\n\n// C++\npp = new int[5];","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"3c7e29","input":"#include <iostream>\nusing namespace std;\n\nint a = 10;\nint &r = a; // reference\nint *p = &a; // pointer\n\ncout << \"a is \" << a <<\", r is \" << r << \", p is \" << *p << \"\\n\";\nr += 1;\ncout << \"r is \" << r << \"\\n\";\ncout << \"a is \" << a;","output":{"0":{"name":"stdout","output_type":"stream","text":"a is 10, r is 10, p is 10\nr is 11\na is 11"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"9a9755","input":"// pointer takes 4 bytes of memory\nstruct Rectangle {\n    int length;\n    int breadth;\n};\n\n// static \nstruct Rectangle rectangle = {10, 20};\nstruct Rectangle *p = &rectangle;\n\nprintf(\"%d\\n\", p->length);\nprintf(\"%d\", (*p).length);","output":{"0":{"name":"stdout","output_type":"stream","text":"10\n10"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"216a29","input":"// dynamic\nstruct Rectangle *p;\np = (struct Rectangle *)malloc(sizeof(struct Rectangle));\np -> length = 50;\np -> breadth = 60;\n\nprintf(\"%d\", p->breadth);","output":{"0":{"name":"stdout","output_type":"stream","text":"60"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"b4123c","input":"int add (int a, int b) { // a,b are called parameters (formal parameters)\n    int c = a + b;\n    return c;\n}\n\nint x = 10;\nint y = 20;\nint z = add(x, y); // x,y are called arguments (actual parameters)\nprintf(\"Sum is %d\", z);","output":{"0":{"name":"stdout","output_type":"stream","text":"Sum is 30"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"3a8694","input":"void swap(int x, int y) {\n    int temp;\n    temp = x;\n    x = y;\n    y = temp;\n}\n\nint a = 10, b = 20;\nswap(a, b);\nprintf(\"%d %d\", a, b);","output":{"0":{"name":"stdout","output_type":"stream","text":"10 20"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"04fe08","input":"void swap1(int *x, int *y) { // receiving\n    int temp;\n    temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nint a = 10, b = 20;\nswap1(&a, &b); // sending address\nprintf(\"%d %d\", a, b);","output":{"0":{"name":"stdout","output_type":"stream","text":"20 10"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"ea3923","input":"void swap2(int &x, int &y){\n    int temp;\n    temp = x;\n    x = y;\n    y = temp;\n}\n\nint a = 10, b = 20;\nswap2(a, b);\ncout << a << \" \" << b;","output":{"0":{"name":"stdout","output_type":"stream","text":"20 10"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"d8b705","input":"void func(int A[], int n) {\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", A[i]);\n    }\n}\n\nint A[5] = {2, 3, 4, 5, 6};\nint n = 5;\nfunc(A, n);","output":{"0":{"name":"stdout","output_type":"stream","text":"2 3 4 5 6 "}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"73cae3","input":"printf(\"Hello World\");","output":{"0":{"name":"stdout","output_type":"stream","text":"Hello World"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"b5ee7b","input":"// it is also possible to modify the index value of arrays since it is called by pointer\nvoid func2(int *A, int n) {\n    A[0] = 25;\n}\n\nint A[5] = {2, 3, 4, 5, 6};\nint n = 5;\nfunc2(A, n);\n\nfor (int i = 0; i < 5; i++){\n    printf(\"%d \", A[i]);\n}","output":{"0":{"name":"stdout","output_type":"stream","text":"25 3 4 5 6 "}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"cf8bc7","input":"int *func3 (int n) {\n    int *arrays = new int[n];\n    return arrays;\n}\n\nint *p = func3(5);\np[0] = 5;\np[1] = 2;\np[3] = 8;\np[2] = 99;\np[4] = 100;\n\nfor (int i = 0; i < 5; i++) {\n    printf(\"%d \", p[i]);\n}","output":{"0":{"name":"stdout","output_type":"stream","text":"5 2 99 8 100 "}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"6a40c2","input":"struct Rectangle {\n    int length;\n    int breadth;\n};","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"3c196b","input":"// pass by reference\nvoid constructor(struct Rectangle &r, int length, int breadth){\n    r.length = length;\n    r.breadth = breadth;\n}","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"a020ba","input":"// pass by value\nint area(struct Rectangle r) {\n    return r.length * r.breadth;\n}","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"366043","input":"// pass by address\nvoid changeLength(struct Rectangle *r, int length) {\n    r -> length = length;\n}\n\nstruct Rectangle r1;\nconstructor(r1, 10, 5);\nint rarea = area(r1);\nchangeLength(&r1, 55);\n\nprintf(\"Area is %d\\n\", rarea);\nprintf(\"%d %d\", r1.length, r1.breadth);","output":{"0":{"name":"stdout","output_type":"stream","text":"Area is 50\n55 5"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"064561","input":"class Rectangle2 {\n    private:\n        int length;\n        int breadth;\n    \n    public:\n        Rectangle2(int l, int b) {\n            length = l;\n            breadth = b;\n        }\n        \n        int area() {\n            return length*breadth;\n        }\n        \n        void changeLength(int l) {\n            length = l;\n        }\n    \n        int getLength(){\n            return length;\n        }\n    \n        int getBreadth() {\n            return breadth;\n        }\n}","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"de8d2e","input":"Rectangle2 r(10, 5);\n\nint rarea = r.area();\nr.changeLength(55);\n\ncout << \"Area is \" << rarea << \"\\n\";\ncout << r.getLength() << \" \" << r.getBreadth();","output":{"0":{"name":"stdout","output_type":"stream","text":"Area is 50\n55 5"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"085625","input":"template <class T>\nclass Arithmetic {\n    private:\n        T a;\n        T b;\n    \n    public:\n        Arithmetic(T a, T b) {\n            this -> a = a;\n            this -> b = b;\n        }\n\n        T add() {\n            return a + b;\n        }\n\n        T sub() {\n            return b - a;\n        }\n};","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"ec276c","input":"Arithmetic<int> ar(10, 20);\ncout << ar.add() << \"\\n\";\ncout << ar.sub();","output":{"0":{"name":"stdout","output_type":"stream","text":"30\n10"}},"pos":46,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"98e5d6","input":"// declare an array\nint A[5];\nA[0] = 4;\nA[1] = 5;\nA[3] = 8;\nA[4] = 9;\nA[2] = 6;\n\n// declare and initialize the array\nint B[] = {10, 11, 12};\n\n// Accessing the element of the array\nfor (int i = 0; i < 5; i++) {\n    printf(\"%d \", A[i]);\n}\n\nprintf(\"\\n\");\n\nfor (int i = 0; i < 3; i++) {\n    printf(\"%d \", B[i]);\n}","output":{"0":{"name":"stdout","output_type":"stream","text":"4 5 6 8 9 \n10 11 12 "}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"6932c6","input":"Arithmetic<float> ar(10.05, 20.08);\ncout << ar.add() << \"\\n\";\ncout << ar.sub();","output":{"0":{"name":"stdout","output_type":"stream","text":"30.13\n10.03"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"40fc6a","input":"struct Rectangle {\n    int length;\n    int breadth;\n};","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"7f35cc","input":"// declare the struct\nstruct Rectangle rectangle;\nrectangle.length = 10;\nrectangle.breadth = 5;\nint area = rectangle.length * rectangle.breadth;\n\nprintf(\"Rectangle length is %d and breadth is %d\\n\", rectangle.length, rectangle.breadth);\nprintf(\"Area of Rectangle is %d\", area);","output":{"0":{"name":"stdout","output_type":"stream","text":"Rectangle length is 10 and breadth is 5\nArea of Rectangle is 50"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1a01ff","input":"// declare and initialize struct\nstruct Rectangle r1 = {15, 10};\n\nprintf(\"Rectangle length is %d and breadth is %d.\\n\", r1.length, r1.breadth);\nprintf(\"Area of rectangle is %d.\", r1.length*r1.breadth);","output":{"0":{"name":"stdout","output_type":"stream","text":"Rectangle length is 15 and breadth is 10.\nArea of rectangle is 150."}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"3665aa","input":"// Complex number is \"a + bi\" where i = √(−1)\nstruct Complex { \n    int realPart;\n    int imaginaryPart;\n};","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"86e872","input":"struct Student {\n    int rollNumber;\n    char name[50];\n    char department[10];\n    char address[50];\n};\n\nstruct Student Rohit = {15, \"Rohit\", \"CSE\", \"Dhaka\"};\nprintf(\"Department is %s\", Rohit.department);","output":{"0":{"name":"stdout","output_type":"stream","text":"Department is CSE"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"536613","input":"struct Card {\n    int face;\n    int shape;\n    int color;\n};\n\nstruct Card deck = {1, 0, 0};\n\n// deck of cards\nstruct Card decks[1];\ndecks[0] = {1, 0, 0};\n\nstruct Card decks2[2] = {{1, 0, 0}, {0, 1, 0}};\nprintf(\"Face is %d\\n\", decks2[1].face);\nprintf(\"Shape is %d\\n\", decks2[1].shape);\nprintf(\"Color is %d\", decks2[1].color);","output":{"0":{"name":"stdout","output_type":"stream","text":"Face is 0\nShape is 1\nColor is 0"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"293879","input":"### Struct Examples","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"2b65d3","input":"## Reference (C++)\n\nReference is an alias name of a variable; they both point to the same variable.\n\n![reference](https://i.ibb.co/6Pm9hsN/image.png)","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"3bfab0","input":"### Pass by address","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"3da2dd","input":"## Functions\n\nfunction is a piece of code that performs a specfic task.\n\n* Pass by value\n    * value is copied to the parameter, any changes of copied variables won't be reflected to the original variables.\n* Pass by reference\n    * Doesn't take extra memory.\n* Pass by address\n    * it takes memory.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"4b198a","input":"## C++ Templates","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"50bc06","input":"### Return array from Function\n\n![return-array](https://i.ibb.co/3vg2s5y/image.png)","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"54787c","input":"### Array as a parameter\n\nArray is passed only `call/pass by pointer`. So we can write it as `int A[]` or `int *A`. But `int *A` can point to anything, so it's better to use `int A[]`, while passing array as parameter.","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"67a7cf","input":"### Struct as a Parameter\n\nWe can pass `struct` as a parameter in 3 different ways. \n\n* call by value\n* call by address\n* call by reference (c++)\n\nNormal array we can't pass by value but struct array we can pass by value.","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"6d10b6","input":"## Pointers to a structure","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"6e08b2","input":"Arrays are defined as collcection of similiar data elements.\n\n![arrays-memory](https://i.ibb.co/N9VM7Wj/image.png)","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"74bf69","input":"### Pass by value\n\n![pass-by-value](https://i.ibb.co/Htvph5S/image.png)","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"7fb341","input":"## Class and Constructor","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"8cfadb","input":"## Pointers\n\nPointer is an address variable that is meant for storing address of data not data itself.\n\nProgrames can directly access `Stack` memory, but can't access `Heap` memory (it is external thing to the program). Pointers can access `Heap` memory. Pointer access external things through.\n\n* Accessing Heap meory\n* Parameter passing\n* Accessing external resources (keyboard, mouse)\n\n![pointers](https://i.ibb.co/2jC883t/image.png)","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"8d15d9","input":"## Struct\n\nCollection of different data members, These data members can be different types. It is useful for defining user data types.\n\n![struct-in-memory](https://i.ibb.co/zmvWGwN/image.png)","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"8dba20","input":"This `Rectange` doesn't occupy any space in memory, It will be occupied memory once it is declared or initialized.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"af2d38","input":"### Acessing heap memory through pointer\n\n![accessing-heap](https://i.ibb.co/pXmMzCN/image.png)","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"c5ac6d","input":"## Arrays","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"ea62b3","input":"### Pass by reference\n\nOne function can't access to other function variables, but in call by reference `swap2` isn't another function. \nIt is a part of `main` function. It is best suitable for small functions not for complex logical function...\n\n![call-by-reference](https://i.ibb.co/B3XLLgB/image.png)","pos":29,"type":"cell"}
{"id":0,"time":1728456974253,"type":"user"}
{"last_load":1728456977140,"type":"file"}